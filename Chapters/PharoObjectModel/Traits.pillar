!!Traits: reusable class fragments
@cha:traits

Although Pharo does not provide multiple inheritance, it supports a mechanism called Traits for sharing class fragments (behaviour and state) across unrelated classes.
Traits in their simpler form are just collections of methods that can be reused by multiple classes that are not related by inheritance. 
Since Pharo 7.0, traits can also hold state.
Using traits allows one to share code between different classes without duplicating code.
This makes it easy for classes to have a unique superclass, yet still reuse useful behavior with otherwise unrelated classes.

As we will show later, traits propose a way to compose and resolve conflicts in disciplined manner (and not just expecting that the latest loaded method is the correct one as this happens with language such as Groovy).
The basic principle is that the composer (be it a class or a trait) takes always precedence and can decide in its context
how to resolve a conflict. 
Methods can be removed or accessible under a new name at composition time. 


!!! A simple trait
The following *@scr:flying* define a trait. The ==uses:== clauses in an empty array indicating that this trait is not composed of other traits. 

[[[label=scr:flying|caption=A simple trait.
Trait named: #TFlyingAbility
	 uses: {}
	 package: 'Traits-Example'
]]]

The trait ==TFlyingAbility== defines a single method ==fly==.
[[[
TFlyingAbility >> fly 
	^ 'I''m flying!'
]]]

Now we define a class called ==Bird== that uses the trait. 
It means that the class has a method called ==fly==.

[[[
Object subclass: #Bird
	uses: TFlyingAbility
	instanceVariableNames: ''
	classVariableNames: ''
	package: 'Traits-Example'
]]]

Instances of the class ==Bird== know how to answer to  the message ==fly==. 

[[[
| b |
b := Bird new.
b fly
>>> 'I''m flying!'
]]]


!!!! Using a required method
A trait can invoke methods that are available on the class using it.
Here the method ==greeting== of the trait ==TGreetable== in invoking the method ==name== that is not defined
in the trait itself.
In such a case the class using the trait will have to implement such ''required'' method.

[[[
Trait named: #TGreetable
	 uses: {}
	 package: 'Traits-Example'
]]]

[[[
TGreetable >> greeting
	^ 'Hello ', self name
]]]

Notice that ==self== in a trait represents the receiver of the message. 
Nothing changes.

[[[
Object subclass: #Person
	uses: TGreetable
	instanceVariableNames: ''
	classVariableNames: ''
	package: 'Traits-Example'	
]]]

Now in the class ==Person== we define the method ==name==
and the ==greeting== method will invoke it.

[[[
Person >> name 
	^ 'Bob'
]]]

[[[
Person new greeting
>>> 'Hello Bob'
]]]



!!! Self in a trait is the receiver
The question of the status of ==self== in a trait may be raised. 
However, there is not difference.
==self== represents the receiver. The fact that the method is defined in a class or a trait
has no influence on ==self==. 

[[[
Trait named: #TInspector
	uses: {}
	package: 'Traits-Example'
]]]

[[[
TInspector >> whoAmI
	^ self
]]]

[[[
Object subclass: #Foo
	uses: TInspector
	instanceVariableNames: ''
	classVariableNames: ''
	package: 'Traits-Example'

]]]

[[[
| foo |
foo := Foo new.
foo whoAmI == foo
>>> true
]]]


!!! Trait state
Since Pharo 7.0 traits can also define instance variables.

[[[
Trait named: #TCounting
	 uses: {}
	 slots: { #count }
	 package: 'Traits-Example'
]]]


[[[
TCounting >> initializeTCounting
	count := 0
]]]

[[[
TCounting >> increment 
	count := count + 1.
	^ count
]]]

[[[
Object subclass: #Counter
	uses: TCounting
	instanceVariableNames: ''
	classVariableNames: ''
	package: 'Traits-Example'
]]]

[[[
Counter >> initialize
	self initializeTCounting
]]]


[[[
Counter new increment; increment
>>> 2
]]]

!!! A class can use two traits

[[[
Trait named: #TSpeakingAbility
	 uses: {}
	 package: 'Traits-Example'
]]]
 
[[[
TSpeakingAbility >> speak
	^ 'I''m speaking!'
]]]

[[[
Trait named: #TSpeakingAbility
	 uses: {}
	 package: 'Traits-Example'
]]]

[[[
Object subclass: #Duck
	uses: TFlyingAbility + TSpeakingAbility 
	instanceVariableNames: ''
	classVariableNames: ''
	package: 'Traits-Example'
]]]

[[[
| d |
d := Duck new.
d speak
>>> 'I''m speaking!'
d fly
>>> 'I''m flying!'
]]]

!!! Overriding method take always precedence over traits

A method originating from a trait acts as if it would have been defined in the class itself. 
Now the user of a trait (be it a class or another trait) can always redefine the method originating from the trait
and the redefinition takes precedence in the user over the method of trait. 

In the class ==Duck== we can redefine the method ==speak== to do something else and for example send the message ==quack==.

[[[
Duck >> quack
	^ 'QUACK'
]]]

[[[
Duck >> speak
	^ self quack
]]]

[[[
| d |
d := Duck new.
d speak
>>> 'QUACK'
]]]

!!! Composing a trait out of other traits
Trait composition expressions may combine multiple traits using the ==+== operator. 
In case of conflicts (i.e., if multiple traits define methods with the same name), these conflicts can be resolved by explicitly removing these
methods (with ==-==), or by redefining these methods in the class or trait that you are defining. 
It is also possible to ''alias'' methods (with ==@==), providing a new name for them.

%Traits are used in the system kernel. One good example is the class
%==Behavior==.
%[[[label=scr:behaviorwithtraits|caption=Behavior defined using traits.
%Object subclass: #Behavior
%    uses: TPureBehavior @ {#basicAddTraitSelector:withMethod:->#addTraitSelector:withMethod:}
%    instanceVariableNames: 'superclass methodDict format'
%    classVariableNames: 'ObsoleteSubclasses'
%    package: 'Kernel-Classes'
%]]]

%Here we see that the method ==addTraitSelector:withMethod:== defined in the
%trait ==TPureBehavior== has been aliased to
%==basicAddTraitSelector:withMethod:==.

%% should add something to state initialization. 


!!! Managing conflicts



!!!Conclusion